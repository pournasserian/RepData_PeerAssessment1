x
mdat <- matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3, byrow = TRUE,
dimnames = list(c("row1", "row2"),
c("C.1", "C.2", "C.3")))
mdat
x<- matrix(c(1:9), 3, 3)
x
x <- 1:120
sample(x)
sample(c(0,1), 100, replace = TRUE)
sample(c(0,1), 100, replace = TRUE, n=10)
sample(c(0,1), 10, replace = TRUE)
hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
h8 <- hilbert(8); h8
solve(h8)
str(h8)
head(h8)
tail(h8)
summary(h8)
x<- 1:10000
quantile(x)
quantile(x, probs = c(.1,.22.,.87))
quantile(x, probs = c(0.1,0.22,0.87))
examples()
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(temp)
x<- c(1,1,2,2,3,3,4,4)
mean(x)
x<- c(1,.1,2,.2,3,.3,4,.4)
mean(x)
1*.1+2*.2+3*.3+4*.4
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
u <- 0.0025
w*(x-u)^2
sum(w*(x-u)^2)
u<-0.1471
sum(w*(x-u)^2)
u<- 1.077
sum(w*(x-u)^2)
u<-0.3
sum(w*(x-u)^2)
u <- 0.1471
sum(w*(x-u)^2)
data(mtcars)
mtcars
x<-mtcars[, c(1,6)]
x
plot(x)
library(UsingR)
install.packages("UsingR")
library(UsingR)
par(mfrow = c(1,2))
list(galton$child, col="blue, breaks = 100")
hist(galton$child, col="blue, breaks = 100")
hist(galton$child, col="blue", breaks = 100")
hist(galton$child, col="blue", breaks = "100")
hist(galton$child, col="blue", breaks = 100)
par(mfrow = c(1,2))
hist(galton$child, col="blue", breaks = 100)
hist(galton$parent, col="blue", breaks = 100)
library(manulpulate)
library(manilpulate)
library(manipulate)
myHist <- function(mu){}
library(manipulate)
myHist <- function(mu){
hist(galton$child, col = "blue", breaks= 100)
lines(c(mu,mu), c(0, 150), col="red", lwd = 5)
mse <- mean((galton$child-mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mese, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myHist <- function(mu){
hist(galton$child, col = "blue", breaks= 100)
lines(c(mu,mu), c(0, 150), col="red", lwd = 5)
mse <- mean((galton$child-mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myHist <- function(mu){
hist(galton$child, col = "blue", breaks= 100)
lines(c(mu,mu), c(0, 150), col="red", lwd = 5)
mse <- mean((galton$child-mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
myHist <- function(mu){
hist(galton$child, col = "blue", breaks= 100)
lines(c(mu,mu), c(0, 150), col="red", lwd = 5)
mse <- mean((galton$child-mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
library(UsingR)
myHist <- function(mu){
hist(galton$child, col = "blue", breaks= 100)
lines(c(mu,mu), c(0, 150), col="red", lwd = 5)
mse <- mean((galton$child-mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
##example plots
##simple example
x <- 1 : 10
y <- 1 : 10
plot(x, y)
##add axis labels and a title
plot(x, y, xlab = "X axis", ylab = "Y axis")
title("This is a title")
##do the same plot without the frame
plot(x, y, xlab = "X axis", ylab = "Y axis", frame = FALSE)
##do the same plot with lines
plot(x, y, type = "l", xlab = "X axis", ylab = "Y axis", frame = FALSE)
##add points to the current plot
px <- c(4, 5)
py <- c(2, 1)
points(px, py)
##add a line with slope 1.5 and intercept 0
abline(0, 1.5)
##make the linewidth bigger
abline(0, 1.5, lwd = 2)
##plot the gamma density for alpha = 1.5, beta = 2
##get some points to plot, I pick 10,0000 points from 0 to 100
xvals <- seq(0, 10, length = 10000)
yvals <- dgamma(xvals, shape = 1.5, scale = 2)
plot(xvals, yvals, type = "l", lwd = 3, xlab = "Support", ylab = "Density", frame = FALSE)
##output the plot to a pdf
pdf("myplot.pdf")
plot(xvals, yvals, type = "l", lwd = 3, xlab = "Support", ylab = "Density", frame = FALSE)
dev.off()
##output the plot to a png
png("myplot.png")
plot(xvals, yvals, type = "l", lwd = 3, xlab = "Support", ylab = "Density", frame = FALSE)
dev.off()
library(UsingR)
plot(galton$parent, galton$child, pch = 19, col = "blue")
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
plot(x = x, y = y)
x<-x-mean(x)
y<- y-mean(y)
plot(x = x, y = y)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm()
lm(I(x-mean(x))~I(y-mean(y))-1)
data(mtcars)
library(UsingR)
mtcars
x<- mtcars[, 1]
y<- mtcars[,6]
x
y
y<- mtcars[,1]
x<- mtcars[, 6]
plot(x,y)
lm(I(x-mean(x)~I(y-mean(y))))
x
y
x<- mtcars[, 1]
y<- mtcars[,6]
lm(I(x-mean(x)~I(y-mean(y)) -1))
x<- mtcars[, 6]
y<- mtcars[,1]
lm(I(x-mean(x)~I(y-mean(y)) -1))
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
plot(x)
x<-(x-mean(x))/sd(x)
plot(x)
x
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(I(x-mean(x)~I(y-mean(y)) -1))
x<-(x-mean(x))/sd(x)
y<-(y-mean(y))/sd(y)
lm(I(x-mean(x)~I(y-mean(y)) -1))
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
sum((x-mean(x))^2)
sum((x-0.573)^2)
sum((x-0.8)^2)
sum((x-0.36 )^2)
sum((x-0.44 )^2)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(I(x-mean(x)~I(y-mean(y)) -1))
plot(x,y)
line(c(0,10), c(0,-.4))
sum(x*y)sum(x^2)
sum(x*y)/sum(x^2)
cor(y,x)*sd(x)/sd(y)
sd(x)
sd(y)
cor(x,y)
cor(y,x)
mean(x)
mean(y)
0.586+0.276*.573
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
cor(y,x) * sd(y)/sd(x)
cor(x,y) * sd(y)/sd(x)
mean(y)- mean(x) *cor(y,x) * sd(y)/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
y1 <- I(y-mean(y))
x1 <- I(x-mean(x))
lm(x1~y1-1)
lm(y1~x1-1)
lm(x~y-1)
lm(y~x-1)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print p
print(p)
data = data.frame(y=sort(runif(120)), x=sort(rexp(120)), z=sort(rexp(120)),
g1=rep(gl(2,15, labels=c("yes","no")),4),
g2=gl(4,30, labels=LETTERS[1:4]),
g3 = rep(gl(3,5, labels=c("low","med","high")),8) )
grp.means1 = with(data, tapply(y, g1, mean))
grp.means2 = with(data, tapply(y, list(g1,g2), mean))
grp.means3 = with(data, tapply(y, list(g1,g2,g3), mean))
library(lattice)
xyplot(y~x, data)
splom(~data[1:3])
bwplot(y~g1, data, horizontal=F)
histogram(~y, data)
densityplot(~y, data)
barchart(Freq~Var1, as.data.frame.table(grp.means1), origin=0)
dotplot(Freq~Var1, as.data.frame.table(grp.means1), origin=0)
xyplot(y~x | g1, data)
xyplot(y~x | g1+g2, data)
xyplot(y~x | equal.count(z), data) # Using equal.count to create a shingle (overlapping intervals)
splom(~data[1:3] | g1, data)
bwplot(y~g1|g2, data, horizontal=F)
histogram(~y | g1, data)
densityplot(~y | g1, data)
barchart(Freq~Var1 | Var2, as.data.frame.table(grp.means2), origin=0)
dotplot(Freq~Var1 | Var2, as.data.frame.table(grp.means2), origin=0)
xyplot(y~x | g1, data)
splom(~data[1:3] | g1, data)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(lattice)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
set.seed(1234)
par(mar= c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
datafarme <- data.frame(x = x, y = y)
dist(datafarme)
distxy <- dist(datafarme)
set.seed(1234)
par(mar= c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
datafarme <- data.frame(x = x, y = y)
distxy <- dist(datafarme)
hClustering <- hclust(distxy)
plot(hClustering)
set.seed(1234)
par(mar= c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
datafarme <- data.frame(x = x, y = y)
distxy <- dist(datafarme)
hClustering <- hclust(distxy)
plot(hClustering)
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
heatmap(hClustering)
set.seed(1234)
par(mar= c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
###################################################
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
###################################################
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
heatmap(dataMatrix)
set.seed(1234)
par(mar= c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
###################################################
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
###################################################
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
heatmap(dataMatrix)
###################################################
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
set.seed(1234)
par(mar= c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
###################################################
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
###################################################
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
heatmap(dataMatrix)
###################################################
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
set.seed(1234)
par(mar= c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
###################################################
dataFrame <- data.frame(x = x, y = y)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
plot(hClustering)
###################################################
dataMatrix <- as.matrix(dataFrame)[sample(1:12), ]
heatmap(dataMatrix)
###################################################
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
set.seed(1234)
par(mar= c(0,0,0,0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
dataFrame <- data.frame(x = x, y = y)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 5)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
kmeansObj <- kmeans(dataFrame, centers = 3)
names(kmeansObj)
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
kmeansObj <- kmeans(dataFrame, centers = 5)
names(kmeansObj)
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
require(graphics)
dnorm(0) == 1/sqrt(2*pi)
dnorm(1) == exp(-1/2)/sqrt(2*pi)
dnorm(1) == 1/sqrt(2*pi*exp(1))
## Using "log = TRUE" for an extended range :
par(mfrow = c(2,1))
plot(function(x) dnorm(x, log = TRUE), -60, 50,
main = "log { Normal density }")
curve(log(dnorm(x)), add = TRUE, col = "red", lwd = 2)
mtext("dnorm(x, log=TRUE)", adj = 0)
mtext("log(dnorm(x))", col = "red", adj = 1)
plot(function(x) pnorm(x, log.p = TRUE), -50, 10,
main = "log { Normal Cumulative }")
curve(log(pnorm(x)), add = TRUE, col = "red", lwd = 2)
mtext("pnorm(x, log=TRUE)", adj = 0)
mtext("log(pnorm(x))", col = "red", adj = 1)
## if you want the so-called 'error function'
erf <- function(x) 2 * pnorm(x * sqrt(2)) - 1
## (see Abramowitz and Stegun 29.2.29)
## and the so-called 'complementary error function'
erfc <- function(x) 2 * pnorm(x * sqrt(2), lower = FALSE)
## and the inverses
erfinv <- function (x) qnorm((1 + x)/2)/sqrt(2)
erfcinv <- function (x) qnorm(x/2, lower = FALSE)/sqrt(2)
setwd("C:\\Users\\a.pournasserian\\Desktop\\Coursera\\Data Science\\Reproducible Research\\Peer Assessment 1\\git\\RepData_PeerAssessment1")
factor(letters[1:20], labels = "letter")
# Lattice Examples
library(lattice)
attach(mtcars)
# create factors with value labels
gear.f<-factor(gear,levels=c(3,4,5),
labels=c("3gears","4gears","5gears"))
cyl.f <-factor(cyl,levels=c(4,6,8),
labels=c("4cyl","6cyl","8cyl"))
# kernel density plot
densityplot(~mpg,
main="Density Plot",
xlab="Miles per Gallon")
densityplot(~mpg|cyl.f,
main="Density Plot by Number of Cylinders",
xlab="Miles per Gallon")
densityplot(~mpg|cyl.f,
main="Density Plot by Numer of Cylinders",
xlab="Miles per Gallon",
layout=c(1,3))
mtcars
str(mtcars)
gear
mpg
xyplot(mpg~wt|cyl.f*gear.f,
main="Scatterplots by Cylinders and Gears",
ylab="Miles per Gallon", xlab="Car Weight")
require(lattice)
require(stats)
Depth <- equal.count(quakes$depth, number=8, overlap=.1)
my_plot <- xyplot(lat ~ long | Depth, data = quakes)
print(my_plot)
require(stats)
## Tonga Trench Earthquakes
Depth <- equal.count(quakes$depth, number=8, overlap=.1)
xyplot(lat ~ long | Depth, data = quakes)
update(trellis.last.object(),
strip = strip.custom(strip.names = TRUE, strip.levels = TRUE),
par.strip.text = list(cex = 0.75),
aspect = "iso")
quakes
head(quakes)
lat
devised_data$steps
